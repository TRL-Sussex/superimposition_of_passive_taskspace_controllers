#!/usr/bin/env python

import pyexotica as exo
import numpy as np
import math
from pyexotica.publish_trajectory import *
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
import rospy
from time import sleep, time
import signal
import Tkinter as tk

rospy.init_node("figure_eight_ik")

joints = ['lwr_a1_joint', 'lwr_a2_joint', 'lwr_e1_joint', 'lwr_a3_joint', 'lwr_a4_joint', 'lwr_a5_joint', 'lwr_a6_joint']
js_map = None
js_msg = None
js_q = None
def joint_states_data_cb(data):
    global js_map, js_q, js_msg
    js_msg = data
    js_q = data.position #[data.position[data.name.index(joint)] for joint in joints]
    js_map = dict(zip(data.name, data.position))

def figure_eight(t):
    target_pose = np.array([0.6, -0.0 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2, 0, 0, 0])
    target_frame = exo.KDLFrame(target_pose)
    offset_frame = exo.KDLFrame([0,0,0,0,0,-1.57])
    new_frame = offset_frame * target_frame
    return np.asarray(new_frame.get_translation_and_rpy())

window = tk.Tk()
window.title("Target Speed Scale")
w1 = tk.Scale(window, from_=0.0, to=2.0, orient=tk.HORIZONTAL, length=300, resolution=0.05, variable=1.0)
w1.pack()

exo.Setup.init_ros()
constrained_ik = False
if constrained_ik:
    solver = exo.Setup.load_solver('{stack_of_passive_controllers_controller}/config/ik_gazebo.xml')
else:
    solver = exo.Setup.load_solver('{stack_of_passive_controllers_controller}/config/figure_eight_ik.xml')

problem = solver.get_problem()
print(problem.get_scene().get_kinematic_tree().get_controlled_joint_names())

pub = rospy.Publisher("/command", Float64MultiArray, queue_size=1)
sub = rospy.Subscriber("/joint_states", JointState, joint_states_data_cb)
sleep(0.25)

# Wait for joint states to be populated
while js_map is None:
    sleep(0.1)

if constrained_ik:
    problem.set_goal_eq('Position', figure_eight(0.0))
else:
    target = figure_eight(0.0)
    # np.set_printoptions(2, suppress=True)
    # print(target)
    # target[0] += 0.2
    # print(target)
    problem.set_goal('Position', target)
solver.max_iterations = 100
q = solver.solve()[0]
solver.max_iterations = 5

# if not constrained_ik:
#     print(q)
#     msg = Float64MultiArray()
#     msg.data = q[:7]
#     for _ in range(10):
#         pub.publish(msg)
#         sleep(0.01)
#     publish_pose(q, problem)
#     sleep(1)
#     exit()

dt = 0.003
t = 0.0
print('Publishing IK')
signal.signal(signal.SIGINT, sig_int_handler)
while True:
    try:
        if constrained_ik:
            problem.set_goal_eq('Position', figure_eight(t))
        else:
            problem.set_goal('Position', figure_eight(t))
        # if js_map is not None:
        #     problem.update(js_q)
        #     # problem.get_scene().set_model_state_map(js_map)
        # else:
        problem.start_state = q
        s = time()
        q = solver.solve()[0]
        publish_pose(q, problem)
        msg = Float64MultiArray()
        msg.data = q[:7]
        pub.publish(msg)
        e = time()
        if e - s < dt:
            sleep(dt - (e-s))
        # print(solver.get_planning_time())
        window.update()
        speed_scaling = w1.get()
        t = t + (dt * speed_scaling)
    except KeyboardInterrupt:
        break
