#!/usr/bin/env python

import pyexotica as exo
from numpy import array
import math
from pyexotica.publish_trajectory import *
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
import rospy
from time import sleep, time
import signal
import Tkinter as tk

rospy.init_node("figure_eight_ik")

js_map = None
def joint_states_data_cb(data):
    js_map = dict(zip(data.name, data.position))

def figure_eight(t):
    return array([0.6, -0.1 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2, 0, 0, 0])

window = tk.Tk()
window.title("Target Speed Scale")
w1 = tk.Scale(window, from_=0.0, to=2.0, orient=tk.HORIZONTAL, length=300, resolution=0.05, variable=1.0)
w1.pack()

exo.Setup.init_ros()
solver = exo.Setup.load_solver(
    '{stack_of_passive_controllers_controller}/config/figure_eight_ik.xml')
problem = solver.get_problem()
print(problem.get_scene().get_kinematic_tree().get_controlled_joint_names())

pub = rospy.Publisher("/lwr/ik_command", Float64MultiArray, queue_size=1)
sub = rospy.Subscriber("/lwr/joint_states", JointState, joint_states_data_cb)

dt = 0.005
t = 0.0
q = array([0.0] * 14)
print('Publishing IK')
signal.signal(signal.SIGINT, sig_int_handler)
while True:
    try:
        problem.set_goal('Position', figure_eight(t))
        if js_map is not None:
            problem.set_model_state_map(js_map)
        else:
            problem.start_state = q
        s = time()
        q = solver.solve()[0]
        publish_pose(q, problem)
        msg = Float64MultiArray()
        msg.data = q[:7]
        pub.publish(msg)
        e = time()
        if e - s < dt:
            sleep(dt - (e-s))
        window.update()
        speed_scaling = w1.get()
        t = t + (dt * speed_scaling)
    except KeyboardInterrupt:
        break
