#!/usr/bin/env python
from __future__ import print_function, division

import pyexotica as exo
import numpy as np
import math
from pyexotica.publish_trajectory import *
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
from ipab_lwr_msgs.msg import FriCommandJointPosition
import rospy
from time import sleep, time
import signal
from tqdm import tqdm

rospy.init_node("go_to_start")

# joints = ['lwr_a1_joint', 'lwr_a2_joint', 'lwr_e1_joint', 'lwr_a3_joint', 'lwr_a4_joint', 'lwr_a5_joint', 'lwr_a6_joint']
js_map = None
js_msg = None
js_q = None
def joint_states_data_cb(data):
    global js_map, js_q, js_msg
    js_msg = data
    js_q = data.position #[data.position[data.name.index(joint)] for joint in joints]
    js_map = dict(zip(data.name, data.position))

def figure_eight(t):
    target_pose = np.array([0.6, -0.1 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2, 0, 0, 0])
    target_frame = exo.KDLFrame(target_pose)
    offset_frame = exo.KDLFrame([0,0,0,0,0,-1.57])
    new_frame = offset_frame * target_frame
    return np.asarray(new_frame.get_translation_and_rpy())

exo.Setup.init_ros()
solver = exo.Setup.load_solver(
    '{stack_of_passive_controllers_controller}/config/figure_eight_ik.xml')
problem = solver.get_problem()

# pub = rospy.Publisher("/command", Float64MultiArray, queue_size=1)
pub = rospy.Publisher("/lwr/commandJointPosition", FriCommandJointPosition, queue_size=1)
sub = rospy.Subscriber("/joint_states", JointState, joint_states_data_cb)

t = 0.0
q = np.array([0.0] * 14)

while js_map is None:
    sleep(0.1)

problem.set_goal('Position', figure_eight(t))
if js_map is not None:
    problem.update(js_q)
    # problem.get_scene().set_model_state_map(js_map)
else:
    problem.start_state = q
solver.max_iterations = 100
q = solver.solve()[0]
q_to_reach = q[:7]
print("q_target", q_to_reach)
print("joint limits", problem.get_scene().get_kinematic_tree().get_joint_limits())

steps = 10
dt = 1.
np.set_printoptions(2,suppress=True)
diff = np.array(q_to_reach)-np.array(js_q)
for step in tqdm(range(steps)):
    q_cmd = np.array(js_q) + (step+1)/steps * diff
    
    msg = FriCommandJointPosition()
    # msg.header.stamp = rospy.Time.now()
    msg.jointPosition = q_cmd.tolist()
    # msg.joint_names = js_msg.name
    pub.publish(msg)

    # msg = Float64MultiArray()
    # msg.data = q_cmd.tolist()
    # pub.publish(msg)
    sleep(dt)

msg = FriCommandJointPosition()
msg.jointPosition = q_to_reach
pub.publish(msg)

sleep(1)
print("Done")
