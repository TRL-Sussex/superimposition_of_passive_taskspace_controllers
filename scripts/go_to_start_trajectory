#!/usr/bin/env python
from __future__ import print_function, division

import pyexotica as exo
import numpy as np
import math
from pyexotica.publish_trajectory import *
from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
import rospy
from time import sleep, time
import signal
from tqdm import tqdm

rospy.init_node("go_to_start")

joints = ['lwr_a1_joint', 'lwr_a2_joint', 'lwr_e1_joint', 'lwr_a3_joint', 'lwr_a4_joint', 'lwr_a5_joint', 'lwr_a6_joint']
js_map = None
js_q = None
def joint_states_data_cb(data):
    global js_map, js_q
    js_q = [data.position[data.name.index(joint)] for joint in joints]
    js_map = dict(zip(data.name, data.position))

def figure_eight(t):
    target_pose = np.array([0.6, -0.1 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2, 0, 0, 0])
    target_frame = exo.KDLFrame(target_pose)
    offset_frame = exo.KDLFrame([0,0,0,0,0,-1.57])
    new_frame = offset_frame * target_frame
    return np.asarray(new_frame.get_translation_and_rpy())

exo.Setup.init_ros()
solver = exo.Setup.load_solver(
    '{stack_of_passive_controllers_controller}/config/figure_eight_ik.xml')
problem = solver.get_problem()

pub = rospy.Publisher("/lwr/position_controller/command", JointTrajectory, queue_size=1)
sub = rospy.Subscriber("/lwr/joint_states", JointState, joint_states_data_cb)

t = 0.0
q = np.array([0.0] * 14)

while js_map is None:
    sleep(0.1)

problem.set_goal('Position', figure_eight(t))
if js_map is not None:
    problem.get_scene().set_model_state_map(js_map)
else:
    problem.start_state = q
q = solver.solve()[0]
q_to_reach = q[:7]

msg = JointTrajectory()
msg.joint_names = joints

pt = JointTrajectoryPoint()
pt.positions = js_q
pt.velocities = [0.] * len(q_to_reach)
pt.time_from_start = rospy.Duration(0.)
msg.points.append(pt)

pt = JointTrajectoryPoint()
pt.positions = q_to_reach
pt.velocities = [0.] * len(q_to_reach)
pt.time_from_start = rospy.Duration(10.)
msg.points.append(pt)

pub.publish(msg)
sleep(1)
print("Done")
