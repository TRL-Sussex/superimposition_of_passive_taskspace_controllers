#!/usr/bin/env python
from __future__ import print_function, division
import rospy
import pyexotica as exo
import numpy as np
import signal
from pyexotica.publish_trajectory import sig_int_handler
from exotica_examples_py import TargetMarker
from visualization_msgs.msg import Marker
from sensor_msgs.msg import JointState
from geometry_msgs.msg import Point
from time import sleep
from collections import OrderedDict

class Example(object):

    def __init__(self):
        self.joint_state_received = False
        self.lwr_4_link_exo_frame = None
        self.lwr_7_link_exo_frame = None
        self.joint_state_subscriber = rospy.Subscriber('/lwr/joint_states', JointState, self.joint_state_callback, queue_size=1)

        while not self.joint_state_received:
            print("waiting to initialise...")
            sleep(0.1)
        print("4", self.lwr_4_link_exo_frame)
        print("7", self.lwr_7_link_exo_frame)

        self.link_4_target_marker = TargetMarker(pose=self.lwr_4_link_exo_frame.get_translation(),
                                                 server_name='/lwr_4_link/target_marker',
                                                 description='Link 4',
                                                 marker_shape=Marker.SPHERE,
                                                 marker_size=[0.2, 0.2, 0.2],
                                                 controls_rotate=False)
        self.link_7_target_marker = TargetMarker(pose=self.lwr_7_link_exo_frame.get_translation(),
                                                 server_name='/lwr_7_link/target_marker',
                                                 description='Link 7',
                                                 marker_shape=Marker.SPHERE,
                                                 marker_size=[0.2, 0.2, 0.2],
                                                 controls_rotate=False)
        
        self.link_4_cartesian_target_pub = rospy.Publisher('/lwr/stack_of_fic/lwr_4_link/cartesian_target', Point, queue_size=1)
        self.link_7_cartesian_target_pub = rospy.Publisher('/lwr/stack_of_fic/lwr_7_link/cartesian_target', Point, queue_size=1)

    def joint_state_callback(self, data):
        scene = exo.Setup.create_scene(exo.Initializers.SceneInitializer())
        scene.set_model_state_map(dict(zip(data.name, data.position)))
        self.lwr_4_link_exo_frame = scene.fk("lwr_4_link")
        self.lwr_7_link_exo_frame = scene.fk("lwr_7_link")
        self.joint_state_subscriber.unregister()
        self.joint_state_received = True

    def update(self, event):
        self.link_4_cartesian_target_pub.publish(Point(x=self.link_4_target_marker.position_exo.get_translation()[0], y=self.link_4_target_marker.position_exo.get_translation()[1], z=self.link_4_target_marker.position_exo.get_translation()[2]))
        self.link_7_cartesian_target_pub.publish(Point(x=self.link_7_target_marker.position_exo.get_translation()[0], y=self.link_7_target_marker.position_exo.get_translation()[1], z=self.link_7_target_marker.position_exo.get_translation()[2]))


if __name__ == '__main__':
    rospy.init_node('interactive_controller_targets')
    sleep(0.5)
    exo.Setup.init_ros()
    signal.signal(signal.SIGINT, sig_int_handler)
    ex = Example()
    rospy.Timer(rospy.Duration(1.0/10.0), ex.update)
    rospy.spin()
